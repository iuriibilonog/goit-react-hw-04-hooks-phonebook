{"version":3,"sources":["components/ContactsForm/ContactsForm.module.css","components/Contacts/Contacts.module.css","App.module.css","components/FilterField/FilterField.module.css","components/ContactsForm/ContactsForm.jsx","components/Contacts/Contacts.jsx","components/FilterField/FilterField.jsx","App.js","index.js"],"names":["module","exports","ContactsForm","addNewContact","useState","name","setName","number","setNumber","handlerOnChange","e","target","value","reset","onSubmit","preventDefault","className","s","form","inputTitle","inputField","type","pattern","title","required","onChange","addContactBtn","Contacts","contactsArr","deleteContact","contactsList","map","id","contactItem","contactsName","contactsNumber","delBtn","onClick","FilterField","filterTitle","filterInput","App","contacts","setContacts","filter","setFilter","useEffect","localContacts","JSON","parse","localStorage","getItem","setItem","stringify","filteredContacts","NormalizeFilter","toLowerCase","contact","includes","getFilteredContacts","app","v4","item","alert","prev","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a42853d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__3ShuR\",\"inputTitle\":\"ContactsForm_inputTitle__1MCFr\",\"inputField\":\"ContactsForm_inputField__3KjTZ\",\"addContactBtn\":\"ContactsForm_addContactBtn__2Vj7O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"Contacts_contactItem__lzPE4\",\"contactsName\":\"Contacts_contactsName__37hsW\",\"contactsNumber\":\"Contacts_contactsNumber__3couQ\",\"delBtn\":\"Contacts_delBtn__3JxoM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__pKCv1\",\"title\":\"App_title__gntQx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterTitle\":\"FilterField_filterTitle__3uLTO\",\"filterInput\":\"FilterField_filterInput__3J_8l\"};","import { useState } from 'react';\n// import addNewContact from '../../App';\nimport PropTypes from 'prop-types';\nimport s from './ContactsForm.module.css'\n\n\nfunction ContactsForm({addNewContact}) {\n\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  const handlerOnChange = (e) => {\n    const { name, value } = e.target\n    \n    switch (name) {\n      case 'name': return setName(value);\n      case 'number': return setNumber(value);\n      default: return;\n    }\n  }\n\n  const hendlerOnSubmit = (e) => {\n    e.preventDefault();\n    addNewContact({ name, number })\n    reset()\n  }\n\n  const reset = () => {\n    setName('');\n    setNumber('')\n  }\n\n\n\n  \n    return (\n      <form onSubmit={hendlerOnSubmit} className={s.form}>\n        <label className={s.inputTitle}> Name\n          <input className={s.inputField}\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handlerOnChange}\n          />\n        </label>\n\n        <label className={s.inputTitle}> Number\n          <input className={s.inputField}\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handlerOnChange}\n          />\n        </label>\n\n        <button className={s.addContactBtn} type='submit'>Add Contact</button>\n      </form>\n    )\n  }\n\n\nContactsForm.propTypes = {\n    addNewContact: PropTypes.func.isRequired\n  }\n\nexport default ContactsForm;","import s from './Contacts.module.css';\nimport PropTypes from 'prop-types';\n\nconst Contacts = ({ contactsArr, deleteContact }) => {\n\n  return (\n    <ul className={s.contactsList}>\n      {contactsArr.map(({ name, number, id}) =>\n        <li key={id} className={s.contactItem}>\n          <p className={s.contactsName}> {name}</p> : <p className={s.contactsNumber}>{number}</p>\n          <button className={s.delBtn} onClick={()=> deleteContact(id)} type=\"button\">Delete</button>\n        </li>)\n      \n      }\n    </ul>\n  )\n}\n\nContacts.propTypes = {\n  contactsArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }).isRequired\n      \n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired\n  \n}\n\nexport default Contacts;\n","import s from './FilterField.module.css';\nimport PropTypes from 'prop-types';\n\nconst FilterField = ({ value, onChange }) => {\n  return (\n    <label className={s.filterTitle}> Find contacts by name\n      <input className={s.filterInput} type=\"text\" value={value} onChange={onChange}/>\n    </label>\n  )\n}\n\nFilterField.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}\n\nexport default FilterField;","import { useEffect, useState } from \"react\";\nimport s from \"./App.module.css\";\nimport { v4 } from \"uuid\";\nimport \"./App.module.css\";\nimport ContactsForm from \"./components/ContactsForm\";\nimport Contacts from \"./components/Contacts\";\nimport FilterField from \"./components/FilterField\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const localContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    if (localContacts) {\n      setContacts(localContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addNewContact = ({ name, number }) => {\n    const contact = {\n      id: v4(),\n      name: name,\n      number: number,\n    };\n\n    const contactsNames = contacts.map((item) => item.name.toLowerCase());\n\n    contactsNames.includes(contact.name.toLowerCase())\n      ? alert(`${contact.name} is already in contacts.`)\n      : setContacts((prev) => [contact, ...prev]);\n  };\n\n  const changeFilter = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const getFilteredContacts = () => {\n    const NormalizeFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(NormalizeFilter)\n    );\n  };\n\n  const deleteContact = (contactId) => {\n    setContacts((prev) => prev.filter((contact) => contact.id !== contactId));\n  };\n\n  const filteredContacts = getFilteredContacts();\n  return (\n    <div className={s.app}>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactsForm addNewContact={addNewContact} />\n      <h2 className={s.title}>Contacts</h2>\n      <FilterField value={filter} onChange={changeFilter} />\n      <Contacts contactsArr={filteredContacts} deleteContact={deleteContact} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}